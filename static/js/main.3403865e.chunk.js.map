{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","actions.js","API/api.js","containers/App.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","robo","i","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestRobots","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","event","text","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialSearchState","initialRobotsState","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAaeA,EAXH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACrB,OACI,sBAAKC,UAAU,+CAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,sBAAKC,UAAU,KAAf,UACI,6BAAKH,IACL,4BAAIC,WCSLK,EAdC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACd,OACI,8BACKA,EAAOC,KAAI,SAACC,EAAKC,GACd,OAAO,cAAC,EAAD,CAEPR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCONC,EAbG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAChB,OACI,qBAAKT,UAAW,MAAhB,SACI,uBACIA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCAXI,EAPA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAQ,kBAAkBC,OAAO,SAAjE,SACKJ,EAAMK,YCiBJC,G,yDAjBX,WAAYN,GAAO,IAAD,8BACd,gBACKO,MAAM,CACPC,UAAU,GAHA,E,qDAMlB,SAAmBC,EAAMC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAE7B,WACI,OAAGG,KAAKJ,MAAMC,SACH,sDAEJG,KAAKX,MAAMK,a,GAdCQ,cCJdC,EAAoB,sBAEpBC,EAAuB,yBACvBC,EAAuB,yBACvBC,EAAsB,wBCQtBC,EAAc,SAACC,GCZL,IAACC,EDapBD,EAAS,CAAEvB,KAAMmB,KCbGK,EDcd,6CCbRC,MAAMD,GAAME,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WDcnCF,MAAK,SAAAG,GAAI,OAAIN,EAAS,CAAEvB,KAAMoB,EAAwBU,QAASD,OAC/DE,OAAM,SAAAlB,GAAK,OAAIU,EAAS,CAAEvB,KAAMqB,EAAuBS,QAASjB,QEQ/DmB,E,uKACF,WACIjB,KAAKX,MAAM6B,oB,oBAGf,WACI,MAAoDlB,KAAKX,MAAlD8B,EAAP,EAAOA,YAAYnC,EAAnB,EAAmBA,eAAeL,EAAlC,EAAkCA,OAAOyC,EAAzC,EAAyCA,UACnCC,EAAe1C,EAAO2C,QAAO,SAAAC,GAC/B,OAAOA,EAAMnD,KAAKoD,cAAcC,SAASN,EAAYK,kBAEzD,OAAOJ,EACH,2CAEA,sBAAK7C,UAAW,KAAhB,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,eAAgBA,IAC3B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUL,OAAQ0C,e,GAlBxBK,IAAMxB,WAyBTyB,eAxCO,SAAC/B,GACnB,MAAO,CACHuB,YAAYvB,EAAMgC,aAAaT,YAC/BxC,OAAOiB,EAAMW,cAAc5B,OAC3ByC,UAAWxB,EAAMW,cAAca,UAC/BtB,MAAMF,EAAMW,cAAcT,UAGP,SAACU,GACxB,MAAM,CACFxB,eAAe,SAAC6C,GAAD,OAAWrB,GFZLsB,EEY6BD,EAAME,OAAOC,MFZlC,CACjC/C,KAAOkB,EACPY,QAASe,KAFe,IAACA,GEarBZ,gBAAgB,kBAAKX,EAAcC,OA6B5BmB,CAA4CV,GCrC5CgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDRO,EAAqB,CACvBtB,YAAa,IAaXuB,EAAmB,CACrBtB,WAAU,EACVzC,OAAQ,GACRmB,MAAM,ICXJ6C,G,OAAOC,0BACPC,EAAYC,YAAgB,CAAClB,aDHT,WAAyC,IAAxChC,EAAuC,uDAAjC6C,EAAmBM,EAAc,uDAAP,GACvD,OAAOA,EAAO9D,MACV,KAAKkB,EACD,OAAO6C,OAAOC,OAAO,GAAGrD,EAAM,CAACuB,YAAa4B,EAAOhC,UACvD,QACI,OAAOnB,ICF6BW,cDarB,WAAuC,IAAtCX,EAAqC,uDAA/B8C,EAAmBK,EAAY,uDAAL,GACxD,OAAOA,EAAO9D,MACV,KAAKmB,EACD,OAAO4C,OAAOC,OAAO,GAAGrD,EAAM,CAACwB,WAAU,IAC7C,KAAKf,EACD,OAAO2C,OAAOC,OAAO,GAAGrD,EAAM,CAACjB,OAAOoE,EAAOhC,QAAQK,WAAU,IACnE,KAAKd,EACD,OAAO0C,OAAOC,OAAO,GAAGrD,EAAM,CAACE,MAAMiD,EAAOhC,UAChD,QACI,OAAOnB,MCrBbsD,EAAMC,YAAYN,EAAYO,YAAgBC,IAAgBV,IACpEW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BzB,M","file":"static/js/main.3403865e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card= ({name,email,id})=>{\r\n    return(\r\n        <div className='bg-light-green dib br3 ma2 grow bw2 shadow-5'>\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n            <div className='tc'>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>       \r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({robots}) =>{\r\n    return(\r\n        <div>\r\n            {robots.map((robo,i) =>{\r\n                return <Card\r\n                key={i}\r\n                id={robots[i].id}\r\n                name={robots[i].name}\r\n                email={robots[i].email}\r\n                />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) => {\r\n    return(\r\n        <div className ='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'  \r\n                type='Search'\r\n                placeholder='search robots'\r\n                onChange={onSearchChange}\r\n            />\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return(\r\n        <div style={{overflow:'scroll', border: '5px solid black',height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    ) \r\n}\r\nexport default Scroll;","import { render } from '@testing-library/react';\r\nimport React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super();\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch (error,info) {\r\n        this.setState({hasError: true})\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Somethig Went Wrong!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\nimport {apiCall} from './API/api.js';\r\n\r\nexport const setSearchField=(text)=>({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots=(dispatch)=>{\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './App.css'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport {setSearchField,requestRobots} from '../actions.js'\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n        searchField:state.searchRobots.searchField,\r\n        robots:state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error:state.requestRobots.error\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return{\r\n        onSearchChange:(event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots:()=> requestRobots(dispatch)\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const {searchField,onSearchChange,robots,isPending}=this.props;\r\n        const filteredRobots=robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        } )\r\n        return isPending ?\r\n            <h1>Loading..</h1>:\r\n            (\r\n            <div className= 'tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox onSearchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n            )\r\n    }\r\n} \r\nexport default connect(mapStateToProps,mapDispatchToProps)(App); ","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialSearchState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots=(state=initialSearchState,action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nconst initialRobotsState={\r\n    isPending:false,\r\n    robots: [],\r\n    error:''\r\n}\r\n\r\nexport const requestRobots=(state=initialRobotsState,action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots:action.payload,isPending:false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error:action.payload});    \r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App.js'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {searchRobots,requestRobots} from './reducers.js'\r\nimport 'tachyons';\r\n\r\nconst logger=createLogger();\r\nconst rootReducer=combineReducers({searchRobots,requestRobots});\r\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store} >\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}